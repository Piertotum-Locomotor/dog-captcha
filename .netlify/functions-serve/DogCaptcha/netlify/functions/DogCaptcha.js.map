{
  "version": 3,
  "sources": ["../../../../../../Docker/react/dog-captcha/node_modules/uuid/dist/esm-node/rng.js", "../../../../../../Docker/react/dog-captcha/node_modules/uuid/dist/esm-node/stringify.js", "../../../../../../Docker/react/dog-captcha/node_modules/uuid/dist/esm-node/native.js", "../../../../../../Docker/react/dog-captcha/node_modules/uuid/dist/esm-node/v4.js", "../../../../../../Docker/react/dog-captcha/netlify/functions/DogCaptcha.mjs"],
  "sourceRoot": "C:/Users/meijirou/AppData/Local/Temp/tmp-13856-5GAu3BuP5Xp8",
  "sourcesContent": ["import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "{/* npm run serve */}\r\n{/* http://localhost:9999/.netlify/functions/DogCaptcha */}\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst headers = {\r\n  \"Access-Control-Allow-Origin\" : \"https://astonishing-caramel-d77900.netlify.app\",  //Allowed URL to call API   * = All\r\n  \"Access-Control-Allow-Methods\": \"GET\",\r\n  \"Access-Control-Allow-Headers\": \"Content-Type\"\r\n}\r\n\r\nconst breeds = [\"akita\", \"beagle\", \"dachshund\", \"dalmatian\", \"husky\", \"komondor\", \"poodle/toy\", \"shiba\", \"terrier/yorkshire\"];\r\nconst breeds_ja = [\"\u79CB\u7530\u72AC\", \"\u30D3\u30FC\u30B0\u30EB\", \"\u30C0\u30C3\u30AF\u30B9\u30D5\u30F3\u30C8\", \"\u30C0\u30EB\u30E1\u30B7\u30A2\u30F3\", \"\u30CF\u30B9\u30AD\u30FC\", \"\u30B3\u30E2\u30F3\u30C9\u30FC\u30EB\", \"\u30C8\u30A4\u30D7\u30FC\u30C9\u30EB\", \"\u67F4\u72AC\", \"\u30E8\u30FC\u30AF\u30B7\u30E3\u30FC\u30C6\u30EA\u30A2\"];\r\n\r\nlet target_slot;\r\nlet target_index;\r\nlet slots;\r\n\r\nasync function push_slots() {\r\n  target_slot=[]\r\n  target_slot[0] = Math.floor( Math.random() * 9 ); {/* target answer slot: 0-8 */}\r\n  target_index = Math.floor(Math.random() * breeds.length); {/* target breed index */}\r\n  slots=[];\r\n\r\n  for (let i = 0; i < 9; i++) {\r\n    let ret;\r\n    do {\r\n      ret = Math.floor(Math.random() * breeds.length);\r\n    } while (ret == target_index);\r\n\r\n    let response;\r\n    if (i == target_slot) response = await fetch(\"https://dog.ceo/api/breed/\" + breeds[target_index] + \"/images/random\");\r\n    else response = await fetch(\"https://dog.ceo/api/breed/\" + breeds[ret] + \"/images/random\");\r\n\r\n    let data = await response.json();\r\n    slots.push(data.message);\r\n  }\r\n\r\n  return target_slot;\r\n}\r\n\r\nexports.handler = async function(event, context) {\r\n//export default async () => {\r\n  if (event.httpMethod !== \"POST\") {\r\n    return { statusCode: 405, headers: headers, body: \"Method Not Allowed. Only Allows POST. Your Method Was \" + event.httpMethod + \".\" };\r\n  }\r\n  slots=[];\r\n  let ans = await push_slots();\r\n\r\n  const data = {\r\n    id: uuidv4(),\r\n    quiz: breeds[target_index],\r\n    quiz_ja: breeds_ja[target_index],\r\n    message: slots\r\n  };\r\n\r\n  PushToDatabase(data.id, ans);\r\n\r\n  return { statusCode: 200, headers: headers, body: JSON.stringify(data) };\r\n};\r\n\r\n  {/* POST */}\r\n  function PushToDatabase(id, ans) {\r\n    const data = { id: id, ans: ans };\r\n    fetch('https://roaring-pegasus-3652c3.netlify.app/.netlify/functions/DogCaptchaDatabase', {\r\n    //fetch('http://localhost:9999/.netlify/functions/DogCaptchaDatabase', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: { 'Content-Type': 'application/json' },\r\n    })\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error(`${response.status} ${response.statusText}`);\r\n      }\r\n      return response.json();\r\n      })\r\n    .then(data => console.log(data))\r\n    .catch((error) => console.error('Error:', error));\r\n  }"],
  "mappings": "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",
  "names": ["crypto", "import_crypto", "crypto", "data"]
}
