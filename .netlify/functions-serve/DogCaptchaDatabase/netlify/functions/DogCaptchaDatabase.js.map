{
  "version": 3,
  "sources": ["../../../../../../Docker/react/dog-captcha/netlify/functions/DogCaptchaDatabase.mjs"],
  "sourceRoot": "C:/Users/meijirou/AppData/Local/Temp/tmp-19152-7wi6hg0H7mTY",
  "sourcesContent": ["{/* Database */}\r\n{/* http://localhost:9999/.netlify/functions/DogCaptchaDatabase */}\r\n\r\nlet databaseJSON = [];\r\n\r\nexports.handler = async function(event, context) {\r\n//export async function DogCaptchaDatabase(event, context) {\r\n    if (event.httpMethod === \"GET\") {\r\n        //RETURN DATABASE\r\n\r\n        return { statusCode: 200, body: JSON.stringify(databaseJSON)};\r\n    } else if (event.httpMethod === \"POST\") {\r\n        //EDIT DATABASE\r\n\r\n        let data;\r\n        try {\r\n            //data = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;\r\n            data = event.body;\r\n        } catch (error) {\r\n            console.error(\"Error parsing JSON: \", error);\r\n            return { statusCode: 400, body: \"Invalid request body\" };\r\n        }\r\n        const { id: id, ans: ans } = data;\r\n        let JSONCount = databaseJSON.push(data); //Push to JSON\r\n        if (100 <= JSONCount) {databaseJSON = []; databaseJSON.push(data);}\r\n\r\n        return { statusCode: 200, body: JSON.stringify({ message: \"Successfully Pushed\" })};\r\n    } else if (event.httpMethod === \"DELETE\") {\r\n        //DELETE DETABASE\r\n\r\n        let data;\r\n        try {\r\n            data = event.body;\r\n        } catch (error) {\r\n            console.error(\"Error parsing JSON: \", error);\r\n            return { statusCode: 400, body: \"Invalid request body\" };\r\n        }\r\n        databaseJSON.splice(Number(JSON.parse(data).index), 1); //Delete selected\r\n\r\n        return { statusCode: 200, body: JSON.stringify({ message: \"Successfully Deleted\" })};\r\n    } else {\r\n        return { statusCode: 405, body: \"Method Not Allowed. Only Allows GET or POST or DELETE. Your Method Was \" + event.httpMethod + \".\" };\r\n    }\r\n};\r\n"],
  "mappings": ";AAAA;AAAe;AACf;AAAkE;AAElE,IAAI,eAAe,CAAC;AAEpB,QAAQ,UAAU,eAAe,OAAO,SAAS;AAE7C,MAAI,MAAM,eAAe,OAAO;AAG5B,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,YAAY,EAAC;AAAA,EAChE,WAAW,MAAM,eAAe,QAAQ;AAGpC,QAAI;AACJ,QAAI;AAEA,aAAO,MAAM;AAAA,IACjB,SAAS,OAAO;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,aAAO,EAAE,YAAY,KAAK,MAAM,uBAAuB;AAAA,IAC3D;AACA,UAAM,EAAE,IAAQ,IAAS,IAAI;AAC7B,QAAI,YAAY,aAAa,KAAK,IAAI;AACtC,QAAI,OAAO,WAAW;AAAC,qBAAe,CAAC;AAAG,mBAAa,KAAK,IAAI;AAAA,IAAE;AAElE,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,SAAS,sBAAsB,CAAC,EAAC;AAAA,EACtF,WAAW,MAAM,eAAe,UAAU;AAGtC,QAAI;AACJ,QAAI;AACA,aAAO,MAAM;AAAA,IACjB,SAAS,OAAO;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,aAAO,EAAE,YAAY,KAAK,MAAM,uBAAuB;AAAA,IAC3D;AACA,iBAAa,OAAO,OAAO,KAAK,MAAM,IAAI,EAAE,KAAK,GAAG,CAAC;AAErD,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,SAAS,uBAAuB,CAAC,EAAC;AAAA,EACvF,OAAO;AACH,WAAO,EAAE,YAAY,KAAK,MAAM,4EAA4E,MAAM,aAAa,IAAI;AAAA,EACvI;AACJ;",
  "names": []
}
